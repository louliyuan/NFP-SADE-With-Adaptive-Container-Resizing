import time
import math
import json
import random
import copy
import logging
from Polygon import Polygon
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import pyclipper
from concurrent.futures import ThreadPoolExecutor, as_completed
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.figure import Figure
from tools import placement_worker, nfp_utls
from settings import SPACING, ROTATIONS, BIN_HEIGHT, POPULATION_SIZE, MUTA_RATE

# 设置日志
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# 添加文件处理器以将日志保存在本地文件
file_handler = logging.FileHandler('nester.log')
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
logger.addHandler(file_handler)


class Nester:
    def __init__(self, container=None, shapes=None):
        self.container = container  # 承载组件的容器
        self.shapes = shapes  # 组件信息
        self.results = list()  # storage for the different results
        self.nfp_cache = {}  # 缓存中间计算结果
        # 遗传算法的参数
        self.config = {
            'curveTolerance': 0.3,  # 允许的最大误差转换贝济耶和圆弧线段。在SVG的单位。更小的公差将需要更长的时间来计算
            'spacing': SPACING,  # 组件间的间隔
            'rotations': ROTATIONS,  # 旋转的颗粒度，360°的n份，如：4 = [0, 90 ,180, 270]
            'populationSize': POPULATION_SIZE,  # 基因群数量
            'mutationRate': MUTA_RATE,  # 变异概率
            'useHoles': False,  # 是否有洞，暂时都是没有洞
            'exploreConcave': False,  # 寻找凹面，暂时是否
        }

        self.GA = None  # 遗传算法类
        self.best = None  # 记录最佳结果
        self.worker = None  # 根据NFP结果，计算每个图形的转移数据
        self.container_bounds = None  # 容器的最小包络矩形作为输出图的坐标

    def add_objects(self, objects):
        if not isinstance(objects, list):
            objects = [objects]
        if not self.shapes:
            self.shapes = []

        p_id = 0
        total_area = 0
        for obj in objects:
            # 检查多边形是否有足够的点
            if not obj or len(obj) < 3:
                logging.warning(f"跳过无效的多边形，索引：{p_id}，原因：点数不足")
                p_id += 1
                continue
            # 检查点的格式
            if not all(isinstance(point, (list, tuple)) and len(point) == 2 for point in obj):
                logging.warning(f"跳过无效的多边形，索引：{p_id}，原因：点格式错误")
                p_id += 1
                continue
            points = self.clean_polygon(obj)
            if points is None or len(points) < 3:
                logging.warning(f"跳过无效的多边形，索引：{p_id}，原因：无法清理多边形")
                p_id += 1
                continue
            shape = {
                'area': 0,
                'p_id': str(p_id),
                'points': [{'x': p[0], 'y': p[1]} for p in points],
            }
            area = nfp_utls.polygon_area(shape['points'])
            if area > 0:
                shape['points'].reverse()

            shape['area'] = abs(area)
            total_area += shape['area']
            self.shapes.append(shape)
            p_id += 1

    def add_container(self):
        if not self.container:
            self.container = {}

        total_area = sum(shape['area'] for shape in self.shapes)
        side_length = math.ceil(math.sqrt(total_area))

        # Ensure side length is a power of 2
        side_length = 2 ** math.ceil(math.log2(side_length))

        width = side_length
        height = side_length

        # Adjust height if the polygons don't fill half the container's area
        while height > 1 and total_area <= (width * height / 2):
            height //= 2

        self.container['points'] = [
            {'x': 0, 'y': 0},
            {'x': width, 'y': 0},
            {'x': width, 'y': height},
            {'x': 0, 'y': height}
        ]
        self.container['p_id'] = '-1'
        self.container['width'] = width
        self.container['height'] = height
        self.container_bounds = nfp_utls.get_polygon_bounds(self.container['points'])
        logger.info(f'width:{width},height:{height}')

    def clear(self):
        self.shapes = None

    def run(self):
        if not self.container:
            logger.error("Empty container. Aborting")
            return
        if not self.shapes:
            logger.error("Empty shapes. Aborting")
            return

        faces = list()
        sort_time_start = time.time()
        for i in range(len(self.shapes)):
            shape = copy.deepcopy(self.shapes[i])
            shape['points'] = self.polygon_offset(shape['points'], self.config['spacing'])
            if shape['points'] is None or len(shape['points']) < 3:
                logger.warning(f"Shape at index {i} has invalid offset polygon. Skipping.")
                continue
            shape['area'] = abs(nfp_utls.polygon_area(shape['points']))
            faces.append([str(i), shape])
        sort_time_end = time.time()
        logger.info(f'降序时间：{sort_time_end - sort_time_start}')

        if not faces:
            logger.error("No valid shapes to process after offsetting. Aborting.")
            return

        faces = sorted(faces, reverse=True, key=lambda face: face[1]['area'])
        return self.launch_workers(faces)

    def launch_workers(self, adam):
        if self.GA is None:
            offset_bin = copy.deepcopy(self.container)
            offset_bin['points'] = self.polygon_offset(self.container['points'], self.config['spacing'])
            genetic_algorithm_start = time.time()
            self.GA = genetic_algorithm(adam, offset_bin, self.config)
            genetic_algorithm_end = time.time()
            logger.info(f'初始化遗传算法的时间:{genetic_algorithm_end - genetic_algorithm_start}')
        else:
            generation_start = time.time()
            self.GA.generation()
            generation_end = time.time()
            logger.info(f'遗传算法迭代时间:{generation_end - generation_start}')

        gene_start = time.time()
        for i in range(self.GA.config['populationSize']):
            res = self.find_fitness(self.GA.population[i])
            self.GA.population[i]['fitness'] = res['fitness']
            self.results.append(res)
        gene_end = time.time()
        logger.info(f'计算每组基因适应值时间:{gene_end - gene_start}')

        best_result_start = time.time()
        if len(self.results) > 0:
            best_result = self.results[0]

            for p in self.results:
                if p['fitness'] < best_result['fitness']:
                    best_result = p

            if self.best is None or best_result['fitness'] < self.best['fitness']:
                self.best = best_result
        best_result_end = time.time()
        logger.info(f'找到最佳结果的时间:{best_result_end - best_result_start}')

    def find_fitness(self, individual):
        place_list = copy.deepcopy(individual['placement'])
        rotations = copy.deepcopy(individual['rotation'])
        ids = [p[0] for p in place_list]
        for i in range(len(place_list)):
            place_list[i].append(rotations[i])

        nfp_pairs = list()
        new_cache = dict()
        calculate_polygon_start = time.time()
        for i in range(len(place_list)):
            part = place_list[i]
            key = {
                'A': '-1',
                'B': part[0],
                'inside': True,
                'A_rotation': 0,
                'B_rotation': rotations[i],
            }
            tmp_json_key = json.dumps(key)
            if tmp_json_key not in self.nfp_cache:
                nfp_pairs.append({'A': self.container, 'B': part[1], 'key': key})
            else:
                new_cache[tmp_json_key] = self.nfp_cache[tmp_json_key]

            for j in range(i):
                placed = place_list[j]
                key = {
                    'A': placed[0],
                    'B': part[0],
                    'inside': False,
                    'A_rotation': rotations[j],
                    'B_rotation': rotations[i],
                }
                tmp_json_key = json.dumps(key)
                if tmp_json_key not in self.nfp_cache:
                    nfp_pairs.append({'A': placed[1], 'B': part[1], 'key': key})
                else:
                    new_cache[tmp_json_key] = self.nfp_cache[tmp_json_key]
        calculate_polygon_end = time.time()
        logger.info(f'计算NFP多边形和确保容器与多边形内切的时间:{calculate_polygon_end - calculate_polygon_start}')

        self.nfp_cache = new_cache
        placement_worker_start = time.time()
        self.worker = placement_worker.PlacementWorker(
            self.container, place_list, ids, rotations, self.config, self.nfp_cache
        )
        placement_worker_end = time.time()
        logger.info(f'计算图形的转移量和适应值的类时间:{placement_worker_end - placement_worker_start}')

        process_nfp_start = time.time()
        pair_list = self.process_nfp_parallel(nfp_pairs)
        process_nfp_end = time.time()
        logger.info(f'计算所有图形两两组合的NFP总时间:{process_nfp_end - process_nfp_start}')

        return self.generate_nfp(pair_list)

    def process_nfp_parallel(self, pairs):
        results = []
        with ThreadPoolExecutor(max_workers=8) as executor:  # Increase the number of workers
            futures = {executor.submit(self.process_nfp, pair): pair for pair in pairs}
            for future in as_completed(futures):
                result = future.result()
                if result:
                    results.append(result)
        return results

    def process_nfp(self, pair):
        if pair is None or len(pair) == 0:
            return None

        search_edges = self.config['exploreConcave']
        use_holes = self.config['useHoles']

        A = copy.deepcopy(pair['A'])
        A['points'] = nfp_utls.rotate_polygon(A['points'], pair['key']['A_rotation'])['points']
        B = copy.deepcopy(pair['B'])
        B['points'] = nfp_utls.rotate_polygon(B['points'], pair['key']['B_rotation'])['points']

        if pair['key']['inside']:
            if nfp_utls.is_rectangle(A['points'], 0.0001):
                nfp = nfp_utls.nfp_rectangle(A['points'], B['points'])
            else:
                nfp = nfp_utls.nfp_polygon(A, B, True, search_edges)
            if nfp and len(nfp) > 0:
                for i in range(len(nfp)):
                    if nfp_utls.polygon_area(nfp[i]) > 0:
                        nfp[i].reverse()
        else:
            if search_edges:
                nfp = nfp_utls.nfp_polygon(A, B, False, search_edges)
            else:
                nfp = minkowski_difference(A, B)
            if nfp is None or len(nfp) == 0:
                return None
            for i in range(len(nfp)):
                if not search_edges or i == 0:
                    if abs(nfp_utls.polygon_area(nfp[i])) < abs(nfp_utls.polygon_area(A['points'])):
                        nfp.pop(i)
                        return None
            if len(nfp) == 0:
                return None
            for i in range(len(nfp)):
                if nfp_utls.polygon_area(nfp[i]) > 0:
                    nfp[i].reverse()
                if i > 0:
                    if nfp_utls.point_in_polygon(nfp[i][0], nfp[0]):
                        if nfp_utls.polygon_area(nfp[i]) < 0:
                            nfp[i].reverse()
        return {'key': pair['key'], 'value': nfp}

    def generate_nfp(self, nfp):
        if nfp:
            for i in range(len(nfp)):
                if nfp[i]:
                    key = json.dumps(nfp[i]['key'])
                    self.nfp_cache[key] = nfp[i]['value']
        self.worker.nfpCache = copy.deepcopy(self.nfp_cache)
        return self.worker.place_paths()

    def show_result(self):
        draw_result(self.best['placements'], self.shapes, self.container, self.container_bounds)

    def polygon_offset(self, polygon, offset):
        is_list = True
        if not polygon or len(polygon) < 3:
            logger.warning("多边形无效，无法偏移")
            return None
        if isinstance(polygon[0], dict):
            polygon = [[p['x'], p['y']] for p in polygon]
            is_list = False
        miter_limit = 2
        co = pyclipper.PyclipperOffset(miter_limit, self.config['curveTolerance'])
        try:
            co.AddPath(polygon, pyclipper.JT_ROUND, pyclipper.ET_CLOSEDPOLYGON)
            result = co.Execute(1 * offset)
        except Exception as e:
            logger.error(f"偏移操作失败，异常：{e}")
            return None
        # 检查 result 是否为非空列表
        if not result or not isinstance(result, list) or len(result) == 0:
            logger.warning("偏移结果为空，无法生成偏移多边形")
            return None
        # 检查 result[0] 是否为非空列表
        if not result[0] or not isinstance(result[0], list) or len(result[0]) == 0:
            logger.warning("偏移结果为空，无法生成偏移多边形")
            return None
        if not is_list:
            result = [{'x': p[0], 'y': p[1]} for p in result[0]]
        return result

    def clean_polygon(self, polygon):
        if len(polygon) == 3:
            return [(int(point[0]), int(point[1])) for point in polygon]
        simple = pyclipper.SimplifyPolygon(polygon, pyclipper.PFT_NONZERO)
        if simple is None or len(simple) == 0:
            logger.warning("返回None")
            return None
        biggest = simple[0]
        biggest_area = pyclipper.Area(biggest)
        for i in range(1, len(simple)):
            area = abs(pyclipper.Area(simple[i]))
            if area > biggest_area:
                biggest = simple[i]
                biggest_area = area
        clean = pyclipper.CleanPolygon(biggest, self.config['curveTolerance'])
        if clean is None or len(clean) == 0:
            return None
        return clean


def draw_result(shift_data, polygons, bin_polygon, bin_bounds):
    shapes = list()
    for polygon in polygons:
        contour = [[p['x'], p['y']] for p in polygon['points']]
        shapes.append(Polygon(contour))

    bin_shape = Polygon([[p['x'], p['y']] for p in bin_polygon['points']])
    shape_area = bin_shape.area(0)

    solution = list()
    rates = list()
    for s_data in shift_data:
        tmp_bin = list()
        total_area = 0.0
        for move_step in s_data:
            if move_step['rotation'] != 0:
                shapes[int(move_step['p_id'])].rotate(math.pi / 180 * move_step['rotation'], 0, 0)
            shapes[int(move_step['p_id'])].shift(move_step['x'], move_step['y'])
            tmp_bin.append(shapes[int(move_step['p_id'])])
            total_area += shapes[int(move_step['p_id'])].area(0)
        rates.append(total_area / shape_area)
        solution.append(tmp_bin)
    draw_polygon(solution, rates, bin_bounds, bin_shape)


class genetic_algorithm:
    def __init__(self, adam, bin_polygon, config):
        self.bin_bounds = bin_polygon['points']
        self.bin_bounds = {
            'width': bin_polygon['width'],
            'height': bin_polygon['height'],
        }
        self.config = config
        self.bin_polygon = bin_polygon
        angles = list()
        shapes = copy.deepcopy(adam)
        for shape in shapes:
            angles.append(self.random_angle(shape))
        self.population = [{'placement': shapes, 'rotation': angles}]
        for i in range(1, self.config['populationSize']):
            mutant = self.mutate(self.population[0])
            self.population.append(mutant)

    def random_angle(self, shape):
        angle_list = list()
        for i in range(self.config['rotations']):
            angle_list.append(i * (360 / self.config['rotations']))

        def shuffle_array(data):
            for i in range(len(data) - 1, 0, -1):
                j = random.randint(0, i)
                data[i], data[j] = data[j], data[i]
            return data

        angle_list = shuffle_array(angle_list)
        for angle in angle_list:
            rotate_part = nfp_utls.rotate_polygon(shape[1]['points'], angle)
            if (rotate_part['width'] < self.bin_bounds['width'] and rotate_part['height'] < self.bin_bounds['height']):
                return angle
        return 0

    def mutate(self, individual):
        clone = {
            'placement': individual['placement'][:],
            'rotation': individual['rotation'][:],
        }
        for i in range(len(clone['placement'])):
            if random.random() < 0.01 * self.config['mutationRate']:
                if i + 1 < len(clone['placement']):
                    clone['placement'][i], clone['placement'][i + 1] = clone['placement'][i + 1], clone['placement'][i]
        if random.random() < 0.01 * self.config['mutationRate']:
            clone['rotation'][i] = self.random_angle(clone['placement'][i])
        return clone

    def generation(self):
        self.population = sorted(self.population, key=lambda a: a['fitness'])
        new_population = [self.population[0]]
        while len(new_population) < self.config['populationSize']:
            male = self.random_weighted_individual()
            female = self.random_weighted_individual(male)
            children = self.mate(male, female)
            new_population.append(self.mutate(children[0]))
            if len(new_population) < self.config['populationSize']:
                new_population.append(self.mutate(children[1]))
        self.population = new_population

    def random_weighted_individual(self, exclude=None):
        pop = self.population
        if exclude and pop.index(exclude) >= 0:
            pop.remove(exclude)
        rand = random.random()
        lower = 0
        weight = 1.0 / len(pop)
        upper = weight
        pop_len = len(pop)
        for i in range(pop_len):
            if (rand > lower) and (rand < upper):
                return pop[i]
            lower = upper
            upper += 2 * weight * float(pop_len - i) / pop_len
        return pop[0]

    def mate(self, male, female):
        cutpoint = random.randint(0, len(male['placement']) - 1)
        gene1 = male['placement'][:cutpoint]
        rot1 = male['rotation'][:cutpoint]

        gene2 = female['placement'][:cutpoint]
        rot2 = female['rotation'][:cutpoint]

        def contains(gene, shape_id):
            for i in range(len(gene)):
                if gene[i][0] == shape_id:
                    return True
            return False

        for i in range(len(female['placement']) - 1, -1, -1):
            if not contains(gene1, female['placement'][i][0]):
                gene1.append(female['placement'][i])
                rot1.append(female['rotation'][i])

        for i in range(len(male['placement']) - 1, -1, -1):
            if not contains(gene2, male['placement'][i][0]):
                gene2.append(male['placement'][i])
                rot2.append(male['rotation'][i])

        return [{'placement': gene1, 'rotation': rot1}, {'placement': gene2, 'rotation': rot2}]


def minkowski_difference(A, B):
    Ac = [[p['x'], p['y']] for p in A['points']]
    Bc = [[p['x'] * -1, p['y'] * -1] for p in B['points']]
    solution = pyclipper.MinkowskiSum(Ac, Bc, True)
    largest_area = None
    clipper_nfp = None
    for p in solution:
        p = [{'x': i[0], 'y': i[1]} for i in p]
        sarea = nfp_utls.polygon_area(p)
        if largest_area is None or largest_area > sarea:
            clipper_nfp = p
            largest_area = sarea
    clipper_nfp = [{'x': clipper_nfp[i]['x'] + Bc[0][0] * -1, 'y': clipper_nfp[i]['y'] + Bc[0][1] * -1} for i in
                   range(len(clipper_nfp))]
    return [clipper_nfp]


def draw_polygon_png(solution, bin_bounds, bin_shape, path=None):
    base_width = 8
    base_height = base_width * bin_bounds['height'] / bin_bounds['width']
    num_bin = len(solution)
    fig_height = num_bin * base_height
    fig1 = Figure(figsize=(base_width, fig_height))
    fig1.suptitle('Polygon packing', fontweight='bold')
    FigureCanvas(fig1)

    i_pic = 1  # 记录图片的索引
    for shapes in solution:
        ax = fig1.add_subplot(num_bin, 1, i_pic, aspect='equal')
        ax.set_title('Num %d bin' % i_pic)
        i_pic += 1
        ax.set_xlim(bin_bounds['x'] - 10, bin_bounds['width'] + 50)
        ax.set_ylim(bin_bounds['y'] - 10, bin_bounds['height'] + 50)
        output_obj = list()
        output_obj.append(patches.Polygon(bin_shape.contour(0), fc='green'))
        for s in shapes[:-1]:
            output_obj.append(patches.Polygon(s.contour(0), fc='yellow', lw=1, edgecolor='m'))
        for p in output_obj:
            ax.add_patch(p)

    if path is None:
        path = 'example'

    fig1.savefig('%s.png' % path)


def draw_polygon(solution, rates, bin_bounds, bin_shape):
    # 使用支持中文的字体，例如 SimHei
    plt.rcParams['font.sans-serif'] = ['SimHei']  # 指定默认字体为 SimHei，确保支持中文
    plt.rcParams['axes.unicode_minus'] = False  # 解决负号无法显示的问题

    base_width = 20  # 增加每个子图的宽度
    base_height = base_width * bin_bounds['height'] / bin_bounds['width']
    num_bin = len(solution)
    fig_width = num_bin * base_width  # 横向排列，因此需要增加宽度
    fig1, axes = plt.subplots(1, num_bin, figsize=(fig_width, base_height), dpi=300)  # 调整为1行多列

    fig1.suptitle('多边形排样结果', fontweight='bold', fontsize=18, y=1.05)  # 将 y 参数调整为更大的值，确保标题完全显示

    if num_bin == 1:
        axes = [axes]  # 确保 axes 是一个可迭代的列表

    for i_pic, (ax, shapes) in enumerate(zip(axes, solution), start=1):
        ax.set_xlim(bin_bounds['x'] - 10, bin_bounds['width'] + 50)
        ax.set_ylim(bin_bounds['y'] - 10, bin_bounds['height'] + 50)
        ax.set_aspect('equal')

        # 改进颜色和边框对比度
        output_obj = []
        output_obj.append(patches.Polygon(bin_shape.contour(0), fc='lightgreen', ec='green', alpha=0.5))
        for s in shapes:
            output_obj.append(patches.Polygon(s.contour(0), fc='yellow', lw=0.5, edgecolor='black'))

        for p in output_obj:
            ax.add_patch(p)

        # 添加子图标题
        ax.set_title(f'第 {i_pic} 个容器，利用率：{rates[i_pic - 1] * 100:.2f}%', fontsize=14, y=1.02)

    # 调整子图之间的间距，防止重叠
    plt.subplots_adjust(wspace=0.4)  # 增加子图之间的宽度间隔
    plt.tight_layout(pad=4.0, rect=[0, 0, 1, 0.96])  # 调整布局，增加全局边距
    plt.show()
    fig1.savefig('figure11.png')

def content_loop_rate(best, n, loop_time=0):
    res = best
    run_time = loop_time
    count = 1
    while run_time:
        count += 1
        startime = time.time()
        n.run()
        newtime = time.time()
        logger.info(f'第{count}次循环时间{newtime - startime}')
        best = n.best
        if best['fitness'] <= res['fitness']:
            res = best
        run_time -= 1
    draw_result(res['placements'], n.shapes, n.container, n.container_bounds)


def set_target_loop(best, nest):
    res = best
    total_area = 0
    rate = None
    num_placed = 0
    while 1:
        nest.run()
        best = nest.best
        if best['fitness'] <= res['fitness']:
            res = best
            for s_data in res['placements']:
                tmp_total_area = 0.0
                tmp_num_placed = 0

                for move_step in s_data:
                    tmp_total_area += nest.shapes[int(move_step['p_id'])]['area']
                    tmp_num_placed += 1

                tmp_rates = tmp_total_area / abs(nfp_utls.polygon_area(nest.container['points']))

                if (num_placed < tmp_num_placed or total_area < tmp_total_area or rate < tmp_rates):
                    num_placed = tmp_num_placed
                    total_area = tmp_total_area
                    rate = tmp_rates
        if num_placed == len(nest.shapes):
            break
    draw_result(res['placements'], nest.shapes, nest.container, nest.container_bounds)
